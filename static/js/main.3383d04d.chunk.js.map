{"version":3,"sources":["theme.js","Toggle.js","App.js","serviceWorker.js","index.js"],"names":["breakpoints","xs","sm","md","lg","lightMode","themeName","bg","primary","linkColor","darkGray","green","backgroundGreen","backgroundRed","red","indexChangeFontWeight","fontWeight","indexFooterColor","darkMode","pointerCoord","event","changedTouches","length","touch","x","clientX","y","clientY","pageX","undefined","pageY","Toggle","props","handleClick","bind","handleTouchStart","handleTouchMove","handleTouchEnd","handleFocus","handleBlur","previouslyChecked","checked","defaultChecked","state","hasFocus","prevProps","this","setState","disabled","checkbox","input","target","moved","preventDefault","focus","click","hasOwnProperty","startX","activated","currentX","endX","onFocus","onBlur","type","icons","defaultProps","className","inputProps","classes","classNames","onClick","onTouchStart","onTouchMove","onTouchEnd","getIcon","ref","PureComponent","displayName","paths","StyledStatCard","styled","div","theme","StyledCurrentIndex","span","StyledIndexChange","isIncreasing","StyledIndexName","StyledIndexFooter","formatNumber","number","Intl","NumberFormat","format","ShowStat","data","company","pricecurrent","CHANGE","PERCCHANGE","epcoh_s","dt","Date","setUTCSeconds","toLocaleString","epochToDateTime","lastupd_epoch","IndexCard","exchangeName","isLoaded","exchangeUrlPath","url","axios","get","then","resp","console","log","catch","err","timer","setInterval","fetchMarketStats","React","Component","StyledContainer","StyledToggle","AppHeader","header","AppFooter","footer","StyledTwitterLink","a","StyledAppTitle","h1","StyledAppCardContainer","App","themeFromLocalStorage","localStorage","getItem","toggleChecked","changeTheme","setItem","unchecked","onChange","href","rel","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.3383d04d.chunk.js","sourcesContent":["import { grey, white } from \"color-name\"\n\nconst breakpoints = {\n  xs: '479px',\n  sm: '767px', // lesser than this -> phones\n  md: '991px', // lesser than this -> tablets, small laptops\n  lg: '1199px', // lesser than this laptops, desktops\n}\n\nexport const lightMode = {\n  themeName: \"light\",\n  bg: \"#fff\",\n  primary: \"#111\",\n  breakpoints: breakpoints,\n  linkColor: \"#61dafb\",\n  darkGray: \"#2b2d3c\",\n  green: \"green\",\n  backgroundGreen: \"#ddf0b4\",\n  backgroundRed: \"#f7c2ba\",\n  red: \"red\",\n  indexChangeFontWeight: \"500\",\n  fontWeight: \"500\",\n  indexFooterColor: \"grey\"\n}\n\nexport const darkMode = {\n  themeName: \"dark\",\n  bg: \"#282c34\",\n  primary: \"#fff\",\n  linkColor: \"#61dafb\",\n  breakpoints: breakpoints,\n  green: \"green\",\n  red: \"red\",\n  backgroundGreen: \"#ddf0b4\",\n  backgroundRed: \"#f7c2ba\",\n  indexChangeFontWeight: \"600\",\n  fontWeight: \"600\",\n  indexFooterColor: \"lightgrey\"\n}\n","import React, { PureComponent } from 'react'\nimport classNames from 'classnames'\nimport PropTypes from 'prop-types'\n\nimport \"./Toggle.css\";\n\n// Copyright 2015-present Drifty Co.\n// http://drifty.com/\n// from: https://github.com/driftyco/ionic/blob/master/src/util/dom.ts\n\nfunction pointerCoord(event) {\n  // get coordinates for either a mouse click\n  // or a touch depending on the given event\n  if (event) {\n    const changedTouches = event.changedTouches\n    if (changedTouches && changedTouches.length > 0) {\n      const touch = changedTouches[0]\n      return { x: touch.clientX, y: touch.clientY }\n    }\n    const pageX = event.pageX\n    if (pageX !== undefined) {\n      return { x: pageX, y: event.pageY }\n    }\n  }\n  return { x: 0, y: 0 }\n}\n\nexport default class Toggle extends PureComponent {\n  constructor(props) {\n    super(props)\n    this.handleClick = this.handleClick.bind(this)\n    this.handleTouchStart = this.handleTouchStart.bind(this)\n    this.handleTouchMove = this.handleTouchMove.bind(this)\n    this.handleTouchEnd = this.handleTouchEnd.bind(this)\n    this.handleFocus = this.handleFocus.bind(this)\n    this.handleBlur = this.handleBlur.bind(this)\n    this.previouslyChecked = !!(props.checked || props.defaultChecked)\n    this.state = {\n      checked: !!(props.checked || props.defaultChecked),\n      hasFocus: false,\n    }\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.checked !== this.props.checked) {\n      // Disable linting rule here since this usage of setState inside\n      // componentDidUpdate is OK; see\n      // https://reactjs.org/docs/react-component.html#componentdidupdate\n      // eslint-disable-next-line react/no-did-update-set-state\n      this.setState({ checked: !!this.props.checked })\n    }\n  }\n\n  handleClick(event) {\n    if (this.props.disabled) {\n      return\n    }\n    const checkbox = this.input\n    if (event.target !== checkbox && !this.moved) {\n      this.previouslyChecked = checkbox.checked\n      event.preventDefault()\n      checkbox.focus()\n      checkbox.click()\n      return\n    }\n\n    const checked = this.props.hasOwnProperty('checked') ? this.props.checked : checkbox.checked\n\n    this.setState({ checked })\n  }\n\n  handleTouchStart(event) {\n    if (this.props.disabled) {\n      return\n    }\n    this.startX = pointerCoord(event).x\n    this.activated = true\n  }\n\n  handleTouchMove(event) {\n    if (!this.activated) return\n    this.moved = true\n\n    if (this.startX) {\n      let currentX = pointerCoord(event).x\n      if (this.state.checked && currentX + 15 < this.startX) {\n        this.setState({ checked: false })\n        this.startX = currentX\n        this.activated = true\n      } else if (currentX - 15 > this.startX) {\n        this.setState({ checked: true })\n        this.startX = currentX\n        this.activated = (currentX < this.startX + 5)\n      }\n    }\n  }\n\n  handleTouchEnd(event) {\n    if (!this.moved) return\n    const checkbox = this.input\n    event.preventDefault()\n\n    if (this.startX) {\n      let endX = pointerCoord(event).x\n      if (this.previouslyChecked === true && this.startX + 4 > endX) {\n        if (this.previouslyChecked !== this.state.checked) {\n          this.setState({ checked: false })\n          this.previouslyChecked = this.state.checked\n          checkbox.click()\n        }\n      } else if (this.startX - 4 < endX) {\n        if (this.previouslyChecked !== this.state.checked) {\n          this.setState({ checked: true })\n          this.previouslyChecked = this.state.checked\n          checkbox.click()\n        }\n      }\n\n      this.activated = false\n      this.startX = null\n      this.moved = false\n    }\n  }\n\n  handleFocus(event) {\n    const { onFocus } = this.props\n\n    if (onFocus) {\n      onFocus(event)\n    }\n\n    this.setState({ hasFocus: true })\n  }\n\n  handleBlur(event) {\n    const { onBlur } = this.props\n\n    if (onBlur) {\n      onBlur(event)\n    }\n\n    this.setState({ hasFocus: false })\n  }\n\n  getIcon(type) {\n    const { icons } = this.props\n    if (!icons) {\n      return null\n    }\n    return icons[type] === undefined\n      ? Toggle.defaultProps.icons[type]\n      : icons[type]\n  }\n\n  render() {\n    const { className, icons: _icons, ...inputProps } = this.props\n    const classes = classNames('react-toggle', {\n      'react-toggle--checked': this.state.checked,\n      'react-toggle--focus': this.state.hasFocus,\n      'react-toggle--disabled': this.props.disabled,\n    }, className)\n\n    return (\n      <div className={classes}\n        onClick={this.handleClick}\n        onTouchStart={this.handleTouchStart}\n        onTouchMove={this.handleTouchMove}\n        onTouchEnd={this.handleTouchEnd}>\n        <div className='react-toggle-track'>\n          <div className='react-toggle-track-check'>\n            {this.getIcon('checked')}\n          </div>\n          <div className='react-toggle-track-x'>\n            {this.getIcon('unchecked')}\n          </div>\n        </div>\n        <div className='react-toggle-thumb' />\n\n        <input\n          {...inputProps}\n          ref={ref => { this.input = ref }}\n          onFocus={this.handleFocus}\n          onBlur={this.handleBlur}\n          className='react-toggle-screenreader-only'\n          type='checkbox' />\n      </div>\n    )\n  }\n}\n\nToggle.displayName = 'Toggle'\n\n\nToggle.propTypes = {\n  checked: PropTypes.bool,\n  disabled: PropTypes.bool,\n  defaultChecked: PropTypes.bool,\n  onChange: PropTypes.func,\n  onFocus: PropTypes.func,\n  onBlur: PropTypes.func,\n  className: PropTypes.string,\n  name: PropTypes.string,\n  value: PropTypes.string,\n  id: PropTypes.string,\n  'aria-labelledby': PropTypes.string,\n  'aria-label': PropTypes.string,\n  icons: PropTypes.oneOfType([\n    PropTypes.bool,\n    PropTypes.shape({\n      checked: PropTypes.node,\n      unchecked: PropTypes.node,\n    }),\n  ]),\n}","import React from 'react';\n\nimport axios from 'axios';\n\nimport styled from 'styled-components';\nimport { ThemeProvider } from 'styled-components';\n\nimport \"./App.css\";\nimport { darkMode, lightMode } from './theme';\n\n// import Toggle from 'react-toggle';\n// import \"react-toggle/style.css\"\n\nimport Toggle from \"./Toggle\";\n\nconst HostUrl = \"https://priceapi.moneycontrol.com\"\nconst paths = {\n  \"NIFTY\": \"/pricefeed/notapplicable/inidicesindia/in%3BNSX\",\n  \"SENSEX\": \"/pricefeed/notapplicable/inidicesindia/in%3BSEN\",\n  \"NASDAQ\": \"/pricefeed/notapplicable/indicesglobal/us%3BCOMP\",\n  \"DOWJONES\": \"/pricefeed/notapplicable/indicesglobal/US%3Bdji\"\n}\n\nconst StyledStatCard = styled.div`\n  @media (max-width: ${props => props.theme.breakpoints.sm}){\n    margin: 1rem;\n  }\n  @media (min-width: ${props => props.theme.breakpoints.sm}){\n    margin: 2.5rem;\n  }\n`\nconst StyledCurrentIndex = styled.span`\n  color: ${props => props.theme.primary},\n  font-weight: '500'\n`\nconst StyledIndexChange = styled.span`\n  color: ${props => (props.isIncreasing ? props.theme.green : props.theme.red)};\n  font-weight: ${props => props.theme.indexChangeFontWeight};\n  margin-left: 0.6rem;\n`\nconst StyledIndexName = styled.div`\n  color: ${props => props.theme.primary};\n  font-weight: ${props => props.theme.fontWeight};\n  font-size: 1.5rem;\n`\nconst StyledIndexFooter = styled.div`\n  font-weight: 400;\n  font-size: 0.75rem;\n  color: ${props => props.theme.indexFooterColor};\n`\nconst formatNumber = (number) => {\n  return new Intl.NumberFormat('en-In').format(number)\n}\nconst epochToDateTime = (epcoh_s) => {\n  let dt = new Date(0)\n  dt.setUTCSeconds(epcoh_s)\n  return dt.toLocaleString()\n}\nconst ShowStat = (props) => (\n  <StyledStatCard >\n    <StyledIndexName>{props.data.company}</StyledIndexName>\n    <div>\n      <StyledCurrentIndex >{formatNumber(props.data.pricecurrent)}</StyledCurrentIndex>\n      <StyledIndexChange isIncreasing={props.data.CHANGE > 0}>{props.data.CHANGE > 0 ? '▲' : '▼'}  {formatNumber(props.data.CHANGE)} ({props.data.PERCCHANGE}%)</StyledIndexChange>\n      <StyledIndexFooter>Last Updated on: {epochToDateTime(props.data.lastupd_epoch)}</StyledIndexFooter>\n    </div>\n  </StyledStatCard >\n)\n\nclass IndexCard extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      exchangeName: props.exchangeName,\n      data: null,\n      isLoaded: false\n    }\n  }\n\n  fetchMarketStats() {\n    let exchangeUrlPath = paths[this.state.exchangeName]\n    let url = `${HostUrl}${exchangeUrlPath}`\n    axios.get(url).then(resp => {\n      console.log(resp);\n      this.setState({\n        data: resp.data.data,\n        isLoaded: true\n      })\n    }).catch(err => {\n      console.log(err);\n    })\n  }\n\n  componentDidMount() {\n    this.timer = setInterval(() => {\n      this.fetchMarketStats();\n    }, 5000);\n  }\n\n  componentWillMount() {\n    this.timer = null;\n  }\n\n  render() {\n    const { isLoaded, exchangeName, data } = this.state;\n    return (\n      <div>\n        {isLoaded ?\n          <ShowStat data={data} exchangeName={exchangeName} />\n          : <p>Loading....</p>\n        }\n\n      </div>\n    )\n  }\n}\n\n\nconst StyledContainer = styled.div`\n  text-align: center;\n  background-color: ${props => props.theme.bg};\n`\nconst StyledToggle = styled(Toggle)`\n  .react-toggle--checked .react-toggle-track {\n    background-color: blue;\n  }\n  margin-left: auto;\n`;\nconst AppHeader = styled.header`\n  background-color: ${props => props.theme.bg};\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  padding: 2rem;\n`\nconst AppFooter = styled.footer`\n  color: ${props => props.theme.primary};\n  font-weight: 600;\n  font-size: 1.3rem;\n  padding-bottom: 2rem;\n`\nconst StyledTwitterLink = styled.a`\n  font-weight: 500;\n  color: ${props => props.theme.linkColor};\n  text-decoration: unset;\n`\nconst StyledAppTitle = styled.h1`\n  font-weight: 600;\n  font-size: 2rem;\n  color: ${props => props.theme.primary};\n  margin-left: auto;\n`\nconst StyledAppCardContainer = styled.div`\n  min-height: 100vh;\n  display: flex;\n  flex-flow: wrap;\n  align-items: center;\n  justify-content: center;\n  font-size: calc(10px + 2vmin);\n  color: ${props => props.theme.primary};\n`\nclass App extends React.Component {\n  constructor(props) {\n    super(props)\n    let themeFromLocalStorage = localStorage.getItem(\"theme\");\n    // default theme is light\n    let theme = themeFromLocalStorage === \"dark\" ? darkMode : lightMode\n    this.state = {\n      theme: theme,\n      themeName: themeFromLocalStorage ? themeFromLocalStorage : \"light\",\n      toggleChecked: theme === lightMode ? false : true\n    }\n    this.changeTheme = this.changeTheme.bind(this);\n  }\n\n  changeTheme() {\n    let theme = !this.state.toggleChecked ? darkMode : lightMode\n    let themeName = theme === lightMode ? \"light\" : \"dark\"\n    localStorage.setItem(\"theme\", themeName)\n    this.setState({\n      toggleChecked: !this.state.toggleChecked,\n      theme: !this.state.toggleChecked ? darkMode : lightMode,\n      themeName: themeName\n    })\n\n  }\n\n  render() {\n    return (\n      <ThemeProvider theme={this.state.theme}>\n        <StyledContainer>\n          <AppHeader>\n            <StyledAppTitle>Market Watch</StyledAppTitle>\n            <StyledToggle defaultChecked={this.state.toggleChecked} icons={{\n              checked: null, unchecked: null\n            }} checked={this.state.toggleChecked} onChange={this.changeTheme} />\n          </AppHeader>\n          <StyledAppCardContainer>\n            <IndexCard exchangeName=\"NIFTY\" />\n            <IndexCard exchangeName=\"SENSEX\" />\n            <IndexCard exchangeName=\"NASDAQ\" />\n            <IndexCard exchangeName=\"DOWJONES\" />\n          </StyledAppCardContainer>\n          <AppFooter>Made by <StyledTwitterLink href=\"https://twitter.com/prdpx7/\" target=\"_blank\" rel=\"noopener\">@prdpx7</StyledTwitterLink></AppFooter>\n        </StyledContainer>\n      </ThemeProvider>\n    );\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}