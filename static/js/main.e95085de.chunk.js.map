{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","paths","ShowStat","props","className","exchangeName","data","CHANGE","pricecurrent","PERCCHANGE","IndexCard","state","isLoaded","exchangeUrlPath","this","url","axios","get","then","resp","console","log","setState","catch","err","fetchMarketStats","React","Component","App","href","target","rel","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"6HAAAA,EAAOC,QAAU,IAA0B,kC,qLCQrCC,G,OAAQ,CACZ,MAAS,kDACT,OAAU,kDACV,OAAU,mDACV,SAAY,oDAGRC,EAAW,SAACC,GAAD,OACf,yBAAKC,UAAU,aACb,uBAAGA,UAAU,cAAcD,EAAME,cACjC,2BAAIF,EAAMG,KAAKC,OAAS,EAAI,SAAM,SAAKJ,EAAMG,KAAKE,cAClD,2BAAIL,EAAMG,KAAKC,OAAS,EAApB,WAA4BJ,EAAMG,KAAKC,QAAvC,UAAqDJ,EAAMG,KAAKC,QAApE,KACA,2BAAIJ,EAAMG,KAAKC,OAAS,EAApB,WAA4BJ,EAAMG,KAAKG,YAAvC,UAAyDN,EAAMG,KAAKG,YAAxE,OAGEC,E,YACJ,WAAYP,GAAQ,IAAD,8BACjB,4CAAMA,KACDQ,MAAQ,CACXN,aAAcF,EAAME,aACpBC,KAAM,KACNM,UAAU,GALK,E,gFASC,IAAD,OACbC,EAAkBZ,EAAMa,KAAKH,MAAMN,cACnCU,EAAG,UA5BK,qCA4BL,OAAgBF,GACvBG,IAAMC,IAAIF,GAAKG,MAAK,SAAAC,GAClBC,QAAQC,IAAIF,GACZ,EAAKG,SAAS,CACZhB,KAAMa,EAAKb,KAAKA,KAChBM,UAAU,OAEXW,OAAM,SAAAC,GACPJ,QAAQC,IAAIG,Q,0CAKdV,KAAKW,qB,+BAGG,IAAD,EACkCX,KAAKH,MAAtCC,EADD,EACCA,SAAUP,EADX,EACWA,aAAcC,EADzB,EACyBA,KAChC,OACE,6BACGM,EACC,kBAAC,EAAD,CAAUN,KAAMA,EAAMD,aAAcA,IAClC,+C,GAlCYqB,IAAMC,WA0DfC,MAhBf,WACE,OACE,yBAAKxB,UAAU,OACb,4BAAQA,UAAU,cAChB,2BAAG,0BAAMA,UAAU,cAAhB,gBAAH,QAAwD,uBAAGA,UAAU,WAAWyB,KAAK,6BAA6BC,OAAO,SAASC,IAAI,uBAA9E,aAE1D,4BAAQ3B,UAAU,aAChB,kBAAC,EAAD,CAAWC,aAAa,UACxB,kBAAC,EAAD,CAAWA,aAAa,WACxB,kBAAC,EAAD,CAAWA,aAAa,WACxB,kBAAC,EAAD,CAAWA,aAAa,gBC/DZ2B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBzB,MAAK,SAAA0B,GACJA,EAAaC,gBAEdtB,OAAM,SAAAuB,GACL1B,QAAQ0B,MAAMA,EAAMC,a","file":"static/js/main.e95085de.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport axios from 'axios';\nimport { throwStatement } from '@babel/types';\nimport { func } from 'prop-types';\n\nconst HostUrl = \"https://priceapi.moneycontrol.com\"\nconst paths = {\n  \"NIFTY\": \"/pricefeed/notapplicable/inidicesindia/in%3BNSX\",\n  \"SENSEX\": \"/pricefeed/notapplicable/inidicesindia/in%3BSEN\",\n  \"NASDAQ\": \"/pricefeed/notapplicable/indicesglobal/us%3BCOMP\",\n  \"DOWJONES\": \"/pricefeed/notapplicable/indicesglobal/US%3Bdji\"\n}\n\nconst ShowStat = (props) => (\n  <div className=\"Stat-card\">\n    <p className=\"Stat-title\">{props.exchangeName}</p>\n    <p>{props.data.CHANGE > 0 ? '▲' : '▼'}{props.data.pricecurrent}</p>\n    <p>{props.data.CHANGE > 0 ? `+${props.data.CHANGE}` : `${props.data.CHANGE}`} </p>\n    <p>{props.data.CHANGE > 0 ? `+${props.data.PERCCHANGE}` : `${props.data.PERCCHANGE}`}%</p>\n  </div>\n)\nclass IndexCard extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      exchangeName: props.exchangeName,\n      data: null,\n      isLoaded: false\n    }\n  }\n\n  fetchMarketStats() {\n    let exchangeUrlPath = paths[this.state.exchangeName]\n    let url = `${HostUrl}${exchangeUrlPath}`\n    axios.get(url).then(resp => {\n      console.log(resp);\n      this.setState({\n        data: resp.data.data,\n        isLoaded: true\n      })\n    }).catch(err => {\n      console.log(err);\n    })\n  }\n\n  componentDidMount() {\n    this.fetchMarketStats();\n  }\n\n  render() {\n    const { isLoaded, exchangeName, data } = this.state;\n    return (\n      <div>\n        {isLoaded ?\n          <ShowStat data={data} exchangeName={exchangeName} />\n          : <p>Loading....</p>\n        }\n\n      </div>\n    )\n  }\n}\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <p><span className=\"Stat-title\">Market Watch</span> by  <a className=\"App-link\" href=\"https://twitter.com/prdpx7\" target=\"_blank\" rel=\"noopener noreferrer\">@prdpx7</a></p>\n      </header>\n      <header className=\"App-cards\">\n        <IndexCard exchangeName=\"NIFTY\" />\n        <IndexCard exchangeName=\"SENSEX\" />\n        <IndexCard exchangeName=\"NASDAQ\" />\n        <IndexCard exchangeName=\"DOWJONES\" />\n      </header>\n    </div >\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}