{"version":3,"sources":["theme.js","App.js","serviceWorker.js","index.js"],"names":["breakpoints","xs","sm","md","lg","lightMode","bg","primary","linkColor","darkGray","green","red","darkMode","paths","StyledStatCard","styled","div","StyledCurrentIndex","span","props","theme","StyledIndexChange","isIncreasing","StyledIndexName","formatNumber","number","Intl","NumberFormat","format","ShowStat","data","company","pricecurrent","CHANGE","PERCCHANGE","IndexCard","state","exchangeName","isLoaded","exchangeUrlPath","this","url","axios","get","then","resp","console","log","setState","catch","err","fetchMarketStats","React","Component","StyledContainer","StyledToggle","Toggle","AppHeader","header","AppFooter","footer","StyledTwitterLink","a","StyledAppTitle","h1","StyledAppCardContainer","App","localStorage","getItem","themeName","toggleChecked","changeTheme","bind","setItem","defaultChecked","icons","checked","unchecked","onChange","href","target","rel","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.cdea263b.chunk.js","sourcesContent":["const breakpoints = {\n  xs: '479px',\n  sm: '767px', // lesser than this -> phones\n  md: '991px', // lesser than this -> tablets, small laptops\n  lg: '1199px', // lesser than this laptops, desktops\n}\n\nexport const lightMode = {\n  bg: \"#fff\",\n  primary: \"#111\",\n  breakpoints: breakpoints,\n  linkColor: \"#61dafb\",\n  darkGray: \"#2b2d3c\",\n  green: \"green\",\n  red: \"red\"\n}\n\nexport const darkMode = {\n  bg: \"#282c34\",\n  primary: \"#fff\",\n  linkColor: \"#61dafb\",\n  breakpoints: breakpoints,\n  green: \"green\",\n  red: \"red\"\n}\n","import React from 'react';\n\nimport axios from 'axios';\n\nimport styled from 'styled-components';\nimport { ThemeProvider } from 'styled-components';\n\nimport \"./App.css\";\nimport { darkMode, lightMode } from './theme';\n\nimport Toggle from 'react-toggle';\nimport \"react-toggle/style.css\"\n\n\nconst HostUrl = \"https://priceapi.moneycontrol.com\"\nconst paths = {\n  \"NIFTY\": \"/pricefeed/notapplicable/inidicesindia/in%3BNSX\",\n  \"SENSEX\": \"/pricefeed/notapplicable/inidicesindia/in%3BSEN\",\n  \"NASDAQ\": \"/pricefeed/notapplicable/indicesglobal/us%3BCOMP\",\n  \"DOWJONES\": \"/pricefeed/notapplicable/indicesglobal/US%3Bdji\"\n}\n\nconst StyledStatCard = styled.div`\n  margin: 3rem;\n`\nconst StyledCurrentIndex = styled.span`\n  color: ${props => props.theme.primary},\n  font-weight: '500'\n`\nconst StyledIndexChange = styled.span`\n  color: ${props => (props.isIncreasing ? props.theme.green : props.theme.red)};\n`\nconst StyledIndexName = styled.div`\n  color: ${props => props.theme.primary},\n  font-weight: 500;\n  font-size: 1.5rem;\n`\nconst formatNumber = (number) => {\n  return new Intl.NumberFormat('en-In').format(number)\n}\nconst ShowStat = (props) => (\n  <StyledStatCard >\n    <StyledIndexName>{props.data.company}</StyledIndexName>\n    <div>\n      <StyledCurrentIndex >{formatNumber(props.data.pricecurrent)}</StyledCurrentIndex>\n      <StyledIndexChange isIncreasing={props.data.CHANGE > 0}>{props.data.CHANGE > 0 ? '▲' : '▼'}  {formatNumber(props.data.CHANGE)} ({props.data.PERCCHANGE}%)</StyledIndexChange>\n    </div>\n  </StyledStatCard >\n)\n\nclass IndexCard extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      exchangeName: props.exchangeName,\n      data: null,\n      isLoaded: false\n    }\n  }\n\n  fetchMarketStats() {\n    let exchangeUrlPath = paths[this.state.exchangeName]\n    let url = `${HostUrl}${exchangeUrlPath}`\n    axios.get(url).then(resp => {\n      console.log(resp);\n      this.setState({\n        data: resp.data.data,\n        isLoaded: true\n      })\n    }).catch(err => {\n      console.log(err);\n    })\n  }\n\n  componentDidMount() {\n    this.fetchMarketStats();\n  }\n\n  render() {\n    const { isLoaded, exchangeName, data } = this.state;\n    return (\n      <div>\n        {isLoaded ?\n          <ShowStat data={data} exchangeName={exchangeName} />\n          : <p>Loading....</p>\n        }\n\n      </div>\n    )\n  }\n}\n\n\nconst StyledContainer = styled.div`\n  text-align: center;\n  background-color: ${props => props.theme.bg};\n`\nconst StyledToggle = styled(Toggle)`\n  .react-toggle--checked .react-toggle-track {\n    background-color: blue;\n  }\n  margin-left: auto;\n`;\nconst AppHeader = styled.header`\n  background-color: ${props => props.theme.bg};\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  padding: 2rem;\n`\nconst AppFooter = styled.footer`\n  color: ${props => props.theme.primary};\n  font-weight: 600;\n  font-size: 1.3rem;\n  padding-bottom: 2rem;\n`\nconst StyledTwitterLink = styled.a`\n  font-weight: 500;\n  color: ${props => props.theme.linkColor};\n  text-decoration: unset;\n`\nconst StyledAppTitle = styled.h1`\n  font-weight: 600;\n  font-size: 2rem;\n  color: ${props => props.theme.primary};\n  margin-left: auto;\n`\nconst StyledAppCardContainer = styled.div`\n  min-height: 100vh;\n  display: flex;\n  flex-flow: wrap;\n  align-items: center;\n  justify-content: center;\n  font-size: calc(10px + 2vmin);\n  color: ${props => props.theme.primary};\n`\nclass App extends React.Component {\n  constructor(props) {\n    super(props)\n    let themeFromLocalStorage = localStorage.getItem(\"theme\");\n    // default theme is light\n    let theme = themeFromLocalStorage == \"dark\" ? darkMode : lightMode\n    this.state = {\n      theme: theme,\n      themeName: \"light\",\n      toggleChecked: theme === lightMode ? false : true\n    }\n    this.changeTheme = this.changeTheme.bind(this);\n  }\n\n  changeTheme() {\n    let theme = !this.state.toggleChecked ? darkMode : lightMode\n    let themeName = theme === lightMode ? \"light\" : \"dark\"\n    localStorage.setItem(\"theme\", themeName)\n    this.setState({\n      toggleChecked: !this.state.toggleChecked,\n      theme: !this.state.toggleChecked ? darkMode : lightMode,\n      themeName: themeName\n    })\n\n  }\n\n  render() {\n    return (\n      <ThemeProvider theme={this.state.theme}>\n        <StyledContainer>\n          <AppHeader>\n            <StyledAppTitle>Market Watch</StyledAppTitle>\n            <StyledToggle defaultChecked={this.state.toggleChecked} icons={{\n              checked: null, unchecked: null\n            }} checked={this.state.toggleChecked} onChange={this.changeTheme} />\n          </AppHeader>\n          <StyledAppCardContainer>\n            <IndexCard exchangeName=\"NIFTY\" />\n            <IndexCard exchangeName=\"SENSEX\" />\n            <IndexCard exchangeName=\"NASDAQ\" />\n            <IndexCard exchangeName=\"DOWJONES\" />\n          </StyledAppCardContainer>\n          <AppFooter>Made by <StyledTwitterLink href=\"https://twitter.com/prdpx7/\" target=\"_blank\" rel=\"noopener\">@prdpx7</StyledTwitterLink></AppFooter>\n        </StyledContainer>\n      </ThemeProvider>\n    );\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}